<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>人生即体验 | Tag: linux</title><description>All posts tagged with linux</description><link>https://blog.guanglai.me/</link><item><title>从零安装配置 omarchy 3.x 版本</title><link>https://blog.guanglai.me/posts/install-and-config-omarchy-3x-from-zero/</link><guid isPermaLink="true">https://blog.guanglai.me/posts/install-and-config-omarchy-3x-from-zero/</guid><description>最近因为不想每天都把公司的电脑带回家里，就打算安装尝试下新出的 omarchy 系统，所以记录下从零安装配置 omarchy 3.x offline 版本到基本可用的过程。</description><pubDate>Thu, 30 Oct 2025 13:12:18 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images-oss.guanglai.me/2025/10-29-b48a5a311a950e5e18c6b8c590d7d788.webp&quot; alt=&quot;Omarchy 的实际使用截图&quot; /&gt;&lt;/p&gt;
&lt;p&gt;omarchy 是 dhh，ruby on rails 的作者，基于个人喜好创建的一个基于 archlinux 和 hyprland 以及一系列基础软件创建的 linux 发行版。安装完成后，就已经能够做到基本可用，尤其对于开发者来说。如果你喜欢或者想要尝试平铺窗口管理器，那么可以试试 omarchy。&lt;/p&gt;
&lt;p&gt;本文则是我个人安装和配置 omarchy 的详细记录。&lt;/p&gt;
&lt;p&gt;我这里用于制作 U 盘启动器的工具是 &lt;a href=&quot;https://www.ventoy.net/en/index.html&quot;&gt;Ventoy&lt;/a&gt;，也是我比较喜欢的一个工具，非常推荐。如果你有习惯的烧录 iso 镜像，用于 U 盘启动的工具，也可以使用。&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;我的电脑是台式机，主板是微星 B460M，CPU 是 i510400，显卡是 RTX 3070，这里也是基于我的硬件做的一个安装配置记录，当然，我觉得应该是适用大部分硬件的。&lt;/p&gt;
&lt;p&gt;目前的场景下，omarchy 默认只支持配置一块完整硬盘安装，也即不支持在一块物理硬盘上安装双系统。我虽然是安装双系统，但是 Windows 系统和 omarchy 系统是独立的两块物理硬盘。如果需要在同一块硬盘上安装双系统，则需要手动安装 arhclinux，然后再通过 omarchy 的脚本安装 omarchy 的配置和软件包等等，本篇文章不会涉及。&lt;/p&gt;
&lt;h2&gt;安装启动&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载安装包：&lt;a href=&quot;https://omarchy.org&quot;&gt;https://omarchy.org&lt;/a&gt;，由于是 offline iso installer，不用担心安装过程中的网络问题&lt;/li&gt;
&lt;li&gt;写入到 U 盘，我使用的是 ventoy，直接复制到 U 盘即可&lt;/li&gt;
&lt;li&gt;修改 UEFI 启动项顺序，修改成从 U 盘启动&lt;ol&gt;
&lt;li&gt;微星的主板（微星 B460M），启动 UEFI 后，点按 DEL 键，即可进入 UEFI 界面&lt;/li&gt;
&lt;li&gt;SETTINGS &amp;gt; BOOT，将 UEFI USB Key: UEFI: USB, Partition 2 放到第一位&lt;/li&gt;
&lt;li&gt;保存并退出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;进入 ventoy 引导页面&lt;ol&gt;
&lt;li&gt;选择下载的 omarchy-x.x.x.iso 镜像启动&lt;/li&gt;
&lt;li&gt;Boot in normal mode&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按照 omarchy 安装引导选择或者输入&lt;ol&gt;
&lt;li&gt;Select keyboard layout: English(US)&lt;/li&gt;
&lt;li&gt;Username: your_name&lt;/li&gt;
&lt;li&gt;Password: your_password&lt;/li&gt;
&lt;li&gt;Fullname: your_full_name&lt;/li&gt;
&lt;li&gt;Email address: your_email&lt;/li&gt;
&lt;li&gt;Hostname: your_host_name&lt;/li&gt;
&lt;li&gt;Timezone: Asia/Shanghai&lt;/li&gt;
&lt;li&gt;最后一步，确认是否有误，无误则 Yes，否则 No, change it&lt;/li&gt;
&lt;li&gt;Select install disk: 选择合适的硬盘即可，我选择 /dev/nvme0n1，并且确认修改（Confirm overwriting /dev/nvme0n1, Yes）&lt;/li&gt;
&lt;li&gt;Installing...，等待安装完成，我这里完整耗时为 8m 23s&lt;/li&gt;
&lt;li&gt;拔出 U 盘，Reboot Now&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;修改 UEFI 启动项顺序，修改为 Limine&lt;ol&gt;
&lt;li&gt;SETTINGS &amp;gt; BOOT &amp;gt; UEFI Hard Disk Drive BSS Priorities&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;Boot Option #1&lt;/code&gt;，选择 Limine&lt;/li&gt;
&lt;li&gt;保存并退出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;启动系统，现在就可以配置了&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;配置系统&lt;/h2&gt;
&lt;h3&gt;配置 wifi&lt;/h3&gt;
&lt;p&gt;点击 bar 上的 wifi 图标，Tab 切换，⬇️ 键选择 wifi，Enter 键，然后输入 wifi 密码，Super + W 退出配置页面&lt;/p&gt;
&lt;h3&gt;包管理使用国内源&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;bing.com 搜索 ustc mirror，使用中科大数据源，点击使用帮助&lt;/li&gt;
&lt;li&gt;参考 Arch Linux 页面配置 pacman 国内源&lt;ol&gt;
&lt;li&gt;编辑 &lt;code&gt;/etc/pacman.d/mirrorlist&lt;/code&gt; 文件，&lt;code&gt;sudoedit /etc/pacman.d/mirrorlist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加数据源 &lt;code&gt;Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;参考 Arch Linux CN 页面添加 archlinuxcn 源&lt;ol&gt;
&lt;li&gt;编辑 pacman 包管理配置文件，&lt;code&gt;sudoedit /etc/pacman.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;archlinuxcn-keyring&lt;/code&gt;，&lt;code&gt;sudo pacman -S archlinuxcn-keyring&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;同步系统数据源 &lt;code&gt;sudo pamcan -Syu&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;科学上网&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;先使用另一台电脑下载好订阅文件&lt;/li&gt;
&lt;li&gt;使用 LocalSend 将订阅文件发送到 omarchy 系统&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;flclash-bin&lt;/code&gt;，这里会比较慢，很慢，非常慢，&lt;code&gt;yay -S flclash-bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;sparkle-bin&lt;/code&gt;，这里也很慢，非常慢, &lt;code&gt;yay -S sparkle-bin&lt;/code&gt;，大约  20min&lt;/li&gt;
&lt;li&gt;最好是使用另一台电脑下载 &lt;a href=&quot;https://github.com/chen08209/FlClash/releases&quot;&gt;flclash.AppImage&lt;/a&gt;, 这样速度会快很多。通过 LocalSend 发送到 omarchy，最后在 omarchy 中双击运行&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;中文输入法&lt;/h3&gt;
&lt;p&gt;这里可以参考 &lt;a href=&quot;https://manateelazycat.github.io/2025/08/31/fcitx-best-config/&quot;&gt;manateelazycat 的文章&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装相关软件包&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo pacman -S fcitx5 fcitx5-{gtk,qt,configtool,rime} librime qt5-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Rime 输入法配置方案推荐使用&lt;a href=&quot;https://github.com/iDvel/rime-ice&quot;&gt;雾凇拼音&lt;/a&gt;，或者白雾拼音，我使用的是雾凇拼音&lt;ol&gt;
&lt;li&gt;clone 雾凇拼音到对应配置目录下&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/iDvel/rime-ice.git $HOME/.local/share/fcitx5/rime/
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;或者参考官方文档，使用官方推荐的方式安装&lt;/li&gt;
&lt;li&gt;我是基于雾凇拼音，自己维护了一套个人使用的配置，直接 clone 到对应目录下即可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;输入法皮肤我使用的是 &lt;a href=&quot;https://github.com/catppuccin/fcitx5&quot;&gt;catppuccin fctix5&lt;/a&gt; 里的 macchiato-sky&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;VSCode&lt;/h3&gt;
&lt;p&gt;如果要安装 vscode 的话，推荐通过 omarchy 的工具安装，否则自行安装的话，需要手动配置 &lt;code&gt;~/.vscode/argv.json&lt;/code&gt; 的 &lt;code&gt;passwrod-store&lt;/code&gt; 选项&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SUPER + ALT + SPACE 唤起菜单&lt;/li&gt;
&lt;li&gt;Install &amp;gt; Editor &amp;gt; VSCode&lt;/li&gt;
&lt;li&gt;Linux 下 VSCode 的中文输入有点问题，我暂时还找不到解决办法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;双系统配置&lt;/h2&gt;
&lt;h3&gt;双系统引导&lt;/h3&gt;
&lt;p&gt;omarchy 默认使用 limine 引导器，可以通过下面的命令配置双系统分区引导&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 安装 limine-entry-scan
yay -S limine-entry-tool
# 扫描并选择 windows，其他不用选择
sudo limine-entry-tool --scan
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;时区问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Windows 由于历史包袱，读取硬件时间（RTC, Real Time Clock），并认为是本地时间，即 UTC 加上时区偏移量。Unix / Linux 系统的统一行为则是认为硬件时间（RTC）是 UTC 时间。所以安装双系统后，两个操作系统如果不修改默认行为，同时只有一个系统的时间展示是正确的。&lt;/li&gt;
&lt;li&gt;这里我是修改 Windows 注册表，让 Windows 系统和 Linux 系统行为统一，都认为硬件时间是 UTC 时间，时区由操作系统处理。&lt;/li&gt;
&lt;li&gt;使用管理员权限打开 Windows PowerShell，输入下面的命令&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;reg add &quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation&quot; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;在 Windows 设置 -&amp;gt; 时间和语言 -&amp;gt; 日期和时间中，关闭“自动设置时间”，等待几秒，再重新打开。或者，直接点击“立即同步”按钮&lt;/li&gt;
&lt;li&gt;这样做是为了让 Windows 基于新的 UTC 解读来更新正确的时间&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;至此，omarchy 系统就算是基本可用了。我先使用一段时间，看看这次可以坚持使用多久，总之目前体验下来感觉不错。&lt;/p&gt;
</content:encoded></item><item><title>Linux 下 VS Code 的 C/C++ 调试器使用</title><link>https://blog.guanglai.me/posts/vscode-linux-debugger-launch/</link><guid isPermaLink="true">https://blog.guanglai.me/posts/vscode-linux-debugger-launch/</guid><description>一直以来，我在 Linux 下的 VS Code 的启动调试器都存在无法调试需要获取用户输入的程序，昨天总算是把这个问题解决了。</description><pubDate>Sat, 14 Jun 2025 13:45:02 GMT</pubDate><content:encoded>&lt;p&gt;一直以来，我在 Linux 下的 VS Code 的启动调试器都存在无法调试需要获取用户输入的程序，昨天总算是把这个问题解决了。&lt;/p&gt;
&lt;p&gt;tldr: 在 Linux 下不要用 lldb，用 gdb，具体原因不清楚，但是我被坑了。&lt;/p&gt;
&lt;h2&gt;launch.json 和 task.json&lt;/h2&gt;
&lt;p&gt;VS Code 下启动调试器需要依赖文件夹根目录下的 .vsocde/launch.json 文件，该目录及其子目录的调试器的行为都可以通过在该文件中配置选项来指定。最简单的创建 launch.json 文件的方法是在需要调试的源程序标签页中点击左边 Activity Bar 上的调试器的按钮，当没有 launch.json 文件时，VS Code 会提示根据模板创建 launch.json 文件。然后回到源程序标签下，启动刚刚创建的 launch.json，由于没有生成可调试的可执行文件，需要生成 .vscode/task.json 预先编译源文件生成可调试的可执行文件。正常情况下，接下来应该就可以进行调试。但是在 Manjaro 下使用是我遇到了以下问题。&lt;/p&gt;
&lt;h2&gt;externalConsole 选项/默认外部终端的坑&lt;/h2&gt;
&lt;p&gt;根据 vscode-cpptools 的这个 &lt;a href=&quot;https://github.com/microsoft/vscode-cpptools/issues/2998&quot;&gt;issue&lt;/a&gt; 中线索，当设置 externalConsole 为 true 时，在 Linux 下，调试器会完全无法启动。设置为 false，则可以启动，但是无法获用户输入（后来证实是我遇到的另一个坑）。&lt;/p&gt;
&lt;p&gt;仔细阅读该 issue 可以发现，关键在于 VS Code 的调试器在启动时，如果该选项设置为 true，则 VS Code 会根据 terminal.external.linuxExec 推断在 Linux 下应该启动的默认的 Terminal，并且该选项的默认值为 xterm。但是我的系统上并没有安装 xterm，所以在启动调试器后一直卡顿在这一步。于是安装 xterm。然后调试器正常启动。&lt;/p&gt;
&lt;h2&gt;gdb vs lldb&lt;/h2&gt;
&lt;p&gt;开始时我使用的调试器是 lldb，一切都很正常，唯有在读取用户输入时，无论是内部终端还是外部终端，都无法成功。于是切换到 gdb，成功。从这儿就能感觉到 llvm 在 Linux 下的支持还是不如 gcc，虽然我很喜欢或者说更偏向 clang/llvm。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;有意思的是，我刚刚引用的那个 issue 是唯一被标记的 issue，可见被坑的人应该不在少数 ;p&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images-oss.guanglai.me/2025/421ae69bc1d501ac32b62f13646a3f9d.webp&quot; alt=&quot;唯一标记的 issue&quot; /&gt;&lt;/p&gt;
</content:encoded></item></channel></rss>