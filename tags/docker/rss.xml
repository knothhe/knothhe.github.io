<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>人生即体验 | Tag: docker</title><description>All posts tagged with docker</description><link>https://blog.guanglai.me/</link><item><title>使用 Docker 创建 MySQL 实验环境</title><link>https://blog.guanglai.me/posts/create-a-mysql-lab-using-docker/</link><guid isPermaLink="true">https://blog.guanglai.me/posts/create-a-mysql-lab-using-docker/</guid><description>由于有学习 MySQL 的需求，但是又不想破坏本地的 MySQL(MariaDB)，于是想到了使用 Docker 来创建符合需求的 MySQL 实验环境。</description><pubDate>Sat, 14 Jun 2025 13:45:02 GMT</pubDate><content:encoded>&lt;p&gt;由于有学习 MySQL 的需求，但是又不想破坏本地的 MySQL(MariaDB)，于是想到了使用 Docker 来创建符合需求的 MySQL 实验环境。
并且通过官方(?)提供的测试数据创建用于测试使用的数据库。&lt;/p&gt;
&lt;p&gt;本文默认读者已安装好 Docker 及本地 MySQL。&lt;/p&gt;
&lt;h2&gt;拉取已有的 MySQL Docker 镜像。&lt;/h2&gt;
&lt;p&gt;使用下面的命令搜索可用的 mysql：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker search mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到类似下面的输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
mysql                             MySQL is a widely used, open-source relation…   8621                [OK]
mariadb                           MariaDB is a community-developed fork of MyS…   2997                [OK]
mysql/mysql-server                Optimized MySQL Server Docker images. Create…   637                                     [OK]
centos/mysql-57-centos7           MySQL 5.7 SQL database server                   63
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用下面的命令拉取第一个官方镜像的最新版本：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker pull mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;创建并运行 Docker 容器中的 MySQL&lt;/h2&gt;
&lt;p&gt;使用下面的命令运行和配置刚刚拉取的 Docker 镜像：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run --name mysql-lab -p 3307:3306 -e MYSQL_ROOT_PASSWORD=password -d mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name TEXT&lt;/code&gt; 表示创建的镜像的名称，如果不提供该参数，则 docker 会随机生成一个名称。该示例中创建的名称为 mysql-lab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e TEXT&lt;/code&gt; 表示提供的环境变量的键值对。此处提供一个名为 MYSQL_ROOT_PASSWORD 的环境变量，其值为 password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; 表示在后台运行该容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; 指定容器外端口到容器内端口的映射，3307 为容器外端口，3306 为容器内端口，即 MySQL 默认运行端口。指定后，即可在容器外通过 &lt;code&gt;localhost&lt;/code&gt; 地址加上 3307 端口连接到容器内的 MySQL。就如同操作本地安装的 MySQL 一样，而不需要进行下方的容器外连接 MySQL 的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;检查容器的运行状态&lt;/h2&gt;
&lt;p&gt;使用下面的命令检查：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以类似下面的输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                           NAMES
c046b3491396        mysql               &quot;docker-entrypoint.s…&quot;   4 hours ago         Up 4 hours          3306/tcp, 33060/tcp                             mysql-lab
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;连接 Docker 中的 MySQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接进入容然后进入 MySQL 命令行&lt;/p&gt;
&lt;p&gt;  可以使用下面的命令直接进入 Docker 容器中然后连接该容器中的 MySQL：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker exec -it mysql-lab bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  进入容器后，和在本地中使用类似，使用下面的命令即可进入 MySQL 命令行:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  密码为先前设置的 &lt;code&gt;password&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从容器外连接 MySQL &lt;strong&gt;可直接指定端口映射从容器外连接 MySQL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  更好的方法是在容器外连接 MySQL。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先使用下面的命令查找出刚刚创建的 Docker 镜像的地址：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker inspect mysql-lab | grep IPAddress
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  可以看到如下的输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &quot;IPAddress&quot;: &quot;172.17.0.2&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;根据刚刚查找出的地址连接 MySQL 数据库&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;  mysql -u root -h 172.17.0.2 -P 3306 -p
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;导入测试数据&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载测试数据&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/datacharmer/test_db&quot;&gt;测试数据地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按照地址中的 &lt;code&gt;README&lt;/code&gt; 进行操作即可。下方操作只导入了数据库模型，并未导入实际的数据。且指定端口后不再需要类似下方的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入到下载的测试数据的目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导入到数据库中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mysql -u root -h 172.17.0.2 -P 3306 -p &amp;lt; employees.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试导入的数据完整性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mysql -u root -h 172.17.0.2 -P 3306 -p -t &amp;lt; test_employees_md5.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item></channel></rss>